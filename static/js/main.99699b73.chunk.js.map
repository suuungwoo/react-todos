{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","todos","setTodos","_useState5","_useState6","filter","setFilter","handleDone","id","index","findIndex","todo","done","toConsumableArray","filteredTodos","react_default","a","createElement","className","Typography","component","variant","onSubmit","e","preventDefault","trimmedText","trim","length","concat","Date","getTime","toString","Math","random","document","getElementById","value","TextField","placeholder","onChange","target","Button","color","type","disabled","find","onClick","newTodos","handleDeleteDone","ButtonGroup","map","i","List","ListItem","dense","button","key","Checkbox","tabIndex","disableRipple","checked","ListItemText","primary","ListItemSecondaryAction","IconButton","splice","Delete_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99699b73.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  IconButton,\n  Typography,\n  TextField,\n  List,\n  ListItem,\n  ListItemText,\n  Checkbox,\n  ListItemSecondaryAction,\n  Button,\n  ButtonGroup,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport './App.scss';\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const trimmedText = text.trim();\n    if (trimmedText.length > 0) {\n      const getUniqueId = () => `${new Date().getTime().toString(36)}-${Math.random().toString(36)}`;\n      const todo = {\n        id: getUniqueId(),\n        text: trimmedText,\n        done: false,\n      };\n      setTodos([...todos, todo]);\n      document.getElementById('text').value = '';\n      setText('');\n    }\n  };\n  const handleDone = id => () => {\n    const index = todos.findIndex(todo => todo.id === id);\n    todos[index].done = !todos[index].done;\n    setTodos([...todos]);\n  };\n  const handleDelete = id => () => {\n    const index = todos.findIndex(todo => todo.id === id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  const handleDeleteDone = () => {\n    const newTodos = todos.filter(todo => todo.done === false);\n    setTodos(newTodos);\n  };\n  const filteredTodos = todos.filter(\n    todo => (filter === 'all' && todo)\n      || (filter === 'done' && todo.done)\n      || (filter === 'notDone' && !todo.done),\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <Typography component=\"h1\" variant=\"h2\" className=\"title\">\n          React Todos\n        </Typography>\n\n        <div className=\"form-block\">\n          <form onSubmit={handleSubmit}>\n            <TextField\n              id=\"text\"\n              variant=\"filled\"\n              placeholder=\"タスクを入力\"\n              onChange={handleChange}\n            />\n            <Button\n              className=\"add-buton\"\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              disabled={!text.length}\n            >\n              追加\n            </Button>\n            <Button\n              className=\"all-delete-buton\"\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={!todos.find(todo => todo.done)}\n              onClick={() => {\n                handleDeleteDone();\n              }}\n            >\n              完了を一括削除\n            </Button>\n          </form>\n        </div>\n        <div className=\"filter-block\">\n          <ButtonGroup>\n            <Button onClick={() => setFilter('all')} disabled={filter === 'all'}>\n              全て\n            </Button>\n            <Button onClick={() => setFilter('done')} disabled={filter === 'done'}>\n              未完了\n            </Button>\n            <Button onClick={() => setFilter('notDone')} disabled={filter === 'notDone'}>\n              完了\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div className=\"list-block\">\n          {filteredTodos.length ? (\n            filteredTodos.map((todo, i) => (\n              <List>\n                <ListItem dense button key={i.toString()} onClick={handleDone(todo.id)}>\n                  <Checkbox\n                    tabIndex={-1}\n                    disableRipple\n                    checked={todo.done}\n                    onChange={() => {\n                      handleDone(todo.id);\n                    }}\n                  />\n                  <ListItemText className={todo.done && 'done'} primary={todo.text} />\n                  <ListItemSecondaryAction>\n                    <IconButton onClick={handleDelete(todo.id)}>\n                      <DeleteIcon color=\"error\" />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              </List>\n            ))\n          ) : (\n            <p>タスクがありません</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}